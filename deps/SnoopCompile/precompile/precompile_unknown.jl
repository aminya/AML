function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{Type{EzXML.Document}, Ptr{EzXML._Node}})
    precompile(Tuple{Type{EzXML.Node}, Ptr{EzXML._Node}})
    precompile(Tuple{Type{Main.Person}, EzXML.Node})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
    precompile(Tuple{Type{NamedTuple{(:age, :field, :GPA, :courses, :id), T} where T<:Tuple}, Tuple{Int64, String, Int64, Array{String, 1}, Int64}})
    precompile(Tuple{Type{Main.Person}, EzXML.Node})
    precompile(Tuple{Type{Test.DefaultTestSet}, String})
    precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
    precompile(Tuple{Type{Main.Person}, UInt64, String, Float64, Array{String, 1}, Int64, EzXML.Node})
    precompile(Tuple{Type{Main.Person}, UInt64, String, Float64, Array{String, 1}, Int64, EzXML.Node})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
    precompile(Tuple{Type{Main.University}, String, Nothing, EzXML.Node})
    precompile(Tuple{Type{NamedTuple{(:university,), T} where T<:Tuple}, Tuple{Main.University}})
    precompile(Tuple{Type{Main.University}, Nothing, Nothing, EzXML.Node})
    precompile(Tuple{Type{NamedTuple{(:age, :field, :courses, :id), T} where T<:Tuple}, Tuple{Int64, String, Array{String, 1}, Int64}})
    precompile(Tuple{Type{Main.University}, Nothing, Nothing, EzXML.Node})
    precompile(Tuple{Type{Main.Doc}, Nothing, EzXML.Document})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.ismissing), Tuple{Array{Union{Base.Missing, String}, 1}}})
    precompile(Tuple{Type{Main.Doc}, Nothing, EzXML.Document})
    precompile(Tuple{Type{Array{Expr, 1}}, UndefInitializer, Int64})
    precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
    precompile(Tuple{Type{NamedTuple{(:name, :people), T} where T<:Tuple}, Tuple{String, Array{Main.Person, 1}}})
    precompile(Tuple{Type{Main.University}, String, Nothing, EzXML.Node})
    precompile(Tuple{Type{EzXML.Node}, Ptr{EzXML._Node}, Bool})
    precompile(Tuple{Type{Symbol}, Symbol})
    precompile(Tuple{Type{Main.Doc}, EzXML.Document})
    precompile(Tuple{Type{Main.Doc}, EzXML.Document})
end
